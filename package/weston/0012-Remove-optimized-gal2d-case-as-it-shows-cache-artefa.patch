From bd49dbebf82bd9733a1f28d0008def3f1ee7385e Mon Sep 17 00:00:00 2001
Message-Id: <bd49dbebf82bd9733a1f28d0008def3f1ee7385e.1476965418.git.keller@fs-net.de>
In-Reply-To: <1bbe4f4c985819c8f8ead54288ca1cc8a4b7f51f.1476965418.git.keller@fs-net.de>
References: <1bbe4f4c985819c8f8ead54288ca1cc8a4b7f51f.1476965418.git.keller@fs-net.de>
From: Hartmut Keller <keller@fs-net.de>
Date: Wed, 19 Oct 2016 19:07:36 +0200
Subject: [PATCH 12/12] Remove optimized gal2d case as it shows cache
 artefacts

If the buffer provided by a weston client is not aligned to be
directly used with the i.MX6 G2D unit (i.e. the line width is not a
multiple of 16 bytes), it must be copied to a separate buffer first,
that has correct G2D alignment. This is rather unfortunate because
this copy process must be done by the CPU and increases CPU load
considerably.

However the gal2d-renderer tries to optimize the case when the client
buffer actually does have the correct alignment, for example when using
a full-screen client. In this case, the buffer is directly mapped for
G2D and the extra copy can be omitted.

Unfortunately such client buffers may be cached with write-back
strategy. Which means that some graphic data that was recently written
to this buffer by the CPU may still be in CPU cache and has not yet
reached real RAM. But when the G2D unit copies data from this buffer
to the framebuffer by DMA, it can not see this cached data, it just
accesses the RAM. The visible result therefore may have holes and
gaps, i.e. heavy artefacts.

The correct way of solving this would be to either use buffers with
write-through caching mode, or the G2D unit should flush the cache for
the whole buffer region first before starting any DMA copy. Unfortunately
creating the render buffer is part of the client, where we do not have
any influence on from the weston point of view. And the G2D library is a
closed source library that we can not change either.

The solution chosen here is to simply deactivate the optimized case, so
that the buffer is always copied to a separate buffer first, even if
it is aligned correctly for G2D. The separate buffer is allocated from
the G2D memory pool that seems to be cached correctly with write-through
strategy and therefore never shows any artefacts by CPU caching.

This is not perfect as this extra copy is somewhat slower, but at
least it does not show these artefacts. Maybe we will find a better
solution in the future.
---
 src/gal2d-renderer.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/src/gal2d-renderer.c b/src/gal2d-renderer.c
index da0f701..f1250c0 100644
--- a/src/gal2d-renderer.c
+++ b/src/gal2d-renderer.c
@@ -360,10 +360,12 @@ static gcoSURF getSurfaceFromShm(struct weston_surface *es, struct weston_buffer
 	else
 		format = gcvSURF_A8R8G8B8;
 
+#if 0 //###
 	if(buffer->width == ((buffer->width + 0x7) & ~0x7))
 	{
 		pool = gcvPOOL_USER;
 	}
+#endif
 
 	gcmVERIFY_OK(gcoSURF_Construct(gr->gcoHal,
 						  (gctUINT) buffer->width,
-- 
1.7.4.4

