#!/bin/sh
#
# This file is meant to be sourced in by the final script of a board. The
# calling script can set the following variables. If a variable is not set,
# the default in parentheses is used.
#
#   XORG_CONF: Path of the xorg.conf file to use ($COMMON/etc/X11/xorg.conf)
#
# The script sources in the common_min_final script, which means all variables
# described there can also be used.
#

# Source-in the minimal setup as this is a subset of our task
FS_CONFIG=${FS_CONFIG:-standard}
. board/f+s/common/finalscript_min-common

XORG_CONF=${XORG_CONF:-$COMMON/etc/X11/xorg.conf}

#XORG_CONF_D=etc/X11/xorg.conf.d
XORG_CONF_D=usr/share/X11/xorg.conf.d

# setup touch controller configuration
mkdir -p ${TARGET}/etc/profile.d
${CP} ${COMMON}/etc/profile.d/tslib.sh ${TARGET}/etc/profile.d

# setup sound configuration
mkdir -p ${TARGET}/var/lib/alsa
${CP} ${COMMON}/var/lib/alsa/asound.state ${TARGET}/var/lib/alsa

# Copy the x11 start script and configuration files
if grep ^BR2_PACKAGE_XSERVER_XORG_SERVER=y $BR2_CONFIG > /dev/null; then
    # Copy X server configuration
    mkdir -p ${TARGET}/etc/X11
    ${CP} $XORG_CONF ${TARGET}/etc/X11/xorg.conf
    mkdir -p ${TARGET}/${XORG_CONF_D}
    ${CP} ${COMMON}/${XORG_CONF_D}/10-tslib.conf.off ${TARGET}/${XORG_CONF_D}
    # Copy enhanced profile (with DISPLAY and XAUTHORITY)
    ${CP} ${COMMON}/etc/profile.d/xserver.sh ${TARGET}/etc/profile.d
    # Copy start script for XServer
    ${CP} ${COMMON}/etc/init.d/S40xorg ${TARGET}/etc/init.d
fi

# Copy the weston start script
if grep ^BR2_PACKAGE_WESTON=y $BR2_CONFIG > /dev/null; then
    # Copy start script for weston client
    ${CP} ${COMMON}/etc/init.d/S40weston ${TARGET}/etc/init.d
    # Setup weston environment
    mkdir -p ${TARGET}/etc/profile.d
    ${CP} ${COMMON}/etc/profile.d/weston.sh ${TARGET}/etc/profile.d
    # Install weston.ini
    mkdir -p ${TARGET}/etc/xdg/weston
    ${CP} ${COMMON}/etc/xdg/weston/weston.ini ${TARGET}/etc/xdg/weston
fi

# Prepare firmware image
if grep ^BR2_PACKAGE_FS_UPDATE_LIB=y $BR2_CONFIG > /dev/null; then

	mkdir -p ${TARGET}/rw_fs/root
    if [[ -z "${FIRMWARE_VERSION}" ]]; then
        echo "Environment FIRMWARE_VERSION is not set"
        exit 3
	fi
	echo ${FIRMWARE_VERSION} > ${TARGET}/etc/fw_version

	mkdir -p ${TARGET}/etc/rauc
    mkdir -p ${TARGET}/mnt/rauc

	${CP} ${COMMON}/rauc/rauc.cert.pem ${TARGET}/etc/rauc

	install -m 0444 ${COMMON}/etc/udev/rules.d/99-fus-updater-usb-auto-mount.rules ${TARGET}/etc/udev/rules.d/
	install -m 0444 ${COMMON}/usr/libexec/usb_fs_updater.sh ${TARGET}/usr/libexec/usb_fs_updater.sh
	install -m 0555 ${COMMON}/sbin/preinit.sh ${TARGET}/sbin

	${CP}  ${COMMON}/etc/rauc/system.conf.nand ${TARGET}/etc/rauc/
	${CP}  ${COMMON}/etc/fw_env.config.nand ${TARGET}/etc/

	${CP}  ${COMMON}/etc/rauc/system.conf.mmc ${TARGET}/etc/rauc/
	${CP}  ${COMMON}/etc/fw_env.config.mmc ${TARGET}/etc/
fi

# Prepare application image
if grep ^BR2_PACKAGE_FS_UPDATE_LIB=y $BR2_CONFIG > /dev/null; then

    MKSQUASHFS=${HOST_DIR}/bin/mksquashfs
    APP_KEY=${COMMON}/rauc/rauc.key.pem
    OUTPUT_IMAGE_NAME=${BINARIES_DIR}/application
    APPLICATION_ROOT_FOLDER=${TARGET}/app

    if [[ -z "${APPLICATION_VERSION}" ]]; then
        echo "Environment APPLICATION_VERSION is not set"
        exit 3
    fi

    ${CP} ${COMMON}/app/overlay.ini ${APPLICATION_ROOT_FOLDER}
    ${HOST_DIR}/usr/bin/python3 ${COMMON}/createSignedPackage.py -o ${OUTPUT_IMAGE_NAME} -rf ${APPLICATION_ROOT_FOLDER} -ptm ${MKSQUASHFS} -v ${APPLICATION_VERSION} -kf ${APP_KEY}

    mkdir -p ${TARGET}/rw_fs/root/application/current
    ${CP} ${OUTPUT_IMAGE_NAME}_img ${TARGET}/rw_fs/root/application/app_a.squashfs
    ${CP} ${OUTPUT_IMAGE_NAME}_img ${TARGET}/rw_fs/root/application/app_b.squashfs
fi

