# /etc/inittab
#
# Note: BusyBox init doesn't support runlevels.  The runlevels field is
# completely ignored by BusyBox init. If you want runlevels, use
# sysvinit.
#
# Format for each entry: <id>:<runlevels>:<action>:<process>
#
# id        == tty to run on, or empty for /dev/console
# runlevels == ignored
# action    == one of sysinit, respawn, askfirst, wait, and once
# process   == program to run

# Startup the system
null::sysinit:/bin/mount -t proc proc /proc
#null::sysinit:/bin/mount -t tmpfs -o size=64k,mode=0755 tmpfs /dev
#null::sysinit:/bin/mount -o remount,rw / # REMOUNT_ROOTFS_RW
null::sysinit:/bin/mkdir -p /dev/pts
null::sysinit:/bin/mkdir -p /dev/shm
#null::sysinit:/bin/echo /sbin/mdev > /proc/sys/kernel/hotplug # USE_MDEV
null::sysinit:/bin/mount -a
null::sysinit:/bin/hostname -F /etc/hostname
# now run any rc scripts
::sysinit:/etc/init.d/rcS

# Put a getty on the login_tty. login_tty is a symbolic link to the
# device given in /sys/bdinfo/login_tty. This link is created by
# /etc/init.d/S01fssetup. /sbin/fsgetty is a script that simply starts
# the real /sbin/getty if the login_tty is a valid string. Otherwise it
# stays sleeping in an endless loop, because if it would return here, it
# would respawn immediately, and fail again and again, causing lots of
# annoying syslog messages.
login_tty::respawn:/sbin/fsgetty

# Stuff to do for the 3-finger salute
::ctrlaltdel:/sbin/reboot

# Stuff to do before rebooting
null::shutdown:/etc/init.d/rcK
null::shutdown:/bin/umount -a -r
null::shutdown:/sbin/swapoff -a
